name: Build and Deploy Python App to Azure Web App using ACR

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Log in to Azure using a service principal
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

    # Step 3: Log in to the Azure Container Registry (ACR)
    - name: Log in to ACR
      run: |
        az acr login --name ${{ secrets.AZURE_CONTAINER_REGISTRY }}

    # Step 4: Build the Docker image
    - name: Build Docker image
      run: |
        docker build . -t ${{ secrets.AZURE_CONTAINER_REGISTRY }}/my-python-app:latest

    # Step 5: Push the Docker image to ACR
    - name: Push Docker image to ACR
      run: |
        docker push ${{ secrets.AZURE_CONTAINER_REGISTRY }}/my-python-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    # Step 6: Log in to Azure (again, in case this job runs on a new runner)
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

    # Step 7: Deploy the image to the Azure Web App Service from ACR
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
        images: ${{ secrets.AZURE_CONTAINER_REGISTRY }}/my-python-app:latest
        resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
